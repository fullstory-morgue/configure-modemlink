#!/bin/bash
# modemlink - start device drivers and set /dev/modem link
# (C) 2004 Klaus Knopper
# (C) 2004-2007 Stefan Lippers-Hollmann <s.l-h@gmx.de>

PATH="/bin:/sbin:/usr/bin:/usr/sbin"
export PATH

# we need gettext (is loaded in ssft.sh or cloned...)
if [ -f /usr/bin/gettext.sh ]; then
	. /usr/bin/gettext.sh || exit 1
else
	exit 1
fi
#---------------------------------------------------------------------
# we need root rights
#---------------------------------------------------------------------
SU_ME=$(type -p su-me)  || SU_ME="/usr/bin/su-me"
if [ "$UID" -ne 0 ]; then
	[ -x "$SU_ME" ] && exec "$SU_ME" "$0" "$@"

	echo "$(gettext "Error: You must be root to run this script!")"
	exit 1
fi

TEXTDOMAIN="modemlink"
export TEXTDOMAIN
TEXTDOMAINDIR=/usr/share/locale
export TEXTDOMAINDIR


SSFTSH="$(which ssft.sh)"			|| SSFTSH="/usr/bin/ssft.sh"
# initialize ssft
. "$SSFTSH"
[ -n "$SSFT_FRONTEND" ] ||  SSFT_FRONTEND="$(ssft_choose_frontend)"


TMP="$(mktemp -p /tmp/ modemlink-XXXXXXXXXX)"

bailout () {
	rm -f "$TMP"
	exit $1
}


trap bailout 1 2 3 15



# Shortcut description selected
TYPES=(
	"serial $(gettext "Serial connector (i.e. Modem)")" \
	"usb $(gettext "USB connector (i.e. Modem)")" \
	"irda $(gettext "Infrared wireless device (i.e. cellphone/PDA)")" \
	"bluetooth $(gettext "Bluetooth wireless device (i.e. cellphone/PDA)")" \
#	"winmodem $(gettext "Scan for unsupported \"WinModems\"")"
)

type scanmodem >/dev/null 2>&1 || { unset TYPES[14]; unset TYPES[13]; unset TYPES[12]; }
type rfcomm >/dev/null 2>&1 || { unset TYPES[11]; unset TYPES[10]; unset TYPES[9]; }
type irdadump >/dev/null 2>&1 || { unset TYPES[8]; unset TYPES[7]; unset TYPES[6]; }

# man irattach
DONGLES=(
	"auto $(gettext "Standard SIR (or USB)")" \
	"act200l ACTiSYS Ir-200L dongles" \
	"actisys ACTiSYS IR-220L dongle" \
	"actisys+ ACTiSYS IR-220L+ dongle" \
	"airport Airport dongle" \
	"ep7211 IR port driver for the Cirrus Logic EP7211 processor (ARM based)" \
	"esi Extended Systems JetEye PC ESI-9680" \
	"girbil Greenwich GIrBIL dongle" \
	"litelink Parallax LiteLink dongle & Extended Systems JetEye PC ESI-9680B" \
	"old_belkin Belkin (old) SmartBeam dongle or any dongle only capable of 9600 bauds" \
	"ma600 Mobile Action ma600 dongles" \
	"mcp2120 Dongles based on the MCP2120 (Microchip)" \
	"tekram Tekram IrMate IR-210B dongle"
)

AUTODEVICE=(
	"auto $(gettext "scan ALL devices")"
)

SERIALDEVICES=(
	"ttyS0 (COM1:)" \
	"ttyS1 (COM2:)" \
	"ttyS2 (COM3:)" \
	"ttyS3 (COM4:)" \
	"ttyS4 (COM5:)" \
	"ttyS5 (COM6:)" \
	"ttyS6 (COM7:)" \
	"ttyS7 (COM8:)" \
	"ttyS8 (COM9:)" \
	"ttyS9 (COM10:)" \
	"ttyS10 (COM11:)" \
	"ttyS11 (COM12:)" \
	"ttyS12 (COM13:)" \
	"ttyS13 (COM14:)" \
	"ttyS14 (COM15:)" \
	"ttyS15 (COM16:)"
)

USBDEVICES=(
	"ttyACM0 USB Modem 1" \
	"ttyACM1 USB Modem 2" \
	"ttyACM2 USB Modem 3" \
	"ttyACM3 USB Modem 4" \
	"ttyUSB0 USB Serial 0" \
	"ttyUSB1 USB Serial 1" \
	"ttyUSB2 USB Serial 2" \
	"ttyUSB3 USB Serial 3"
)

num=${#COMMANDS[@]}

gauge() {
	rm -f "$TMP.done"
	status=0
	while [ ! -e "$TMP.done" ]; do
		printf "$status\n"
		printf "$1\n"
		status="$(expr \( 100 - $status \) / 4 + $status)"
		sleep 2
	done | ssft_progress_bar "$(gettext "Scanning devices...")"
}

# Stop status bar
killgauge() {
	touch "$TMP.done" ; wait ; rm -f "$TMP.done"
}

conntype() {
	SSFT_DEFAULT="${TYPES[0]}"
	ssft_select_single "$(gettext "Connection Type")" "$(gettext "Please select type of connection:")" "${TYPES[@]}"  || bailout 1
	[ -n "$SSFT_RESULT" ] && TYPE=$(echo $SSFT_RESULT | cut -d" " -f1)
	unset SSFT_DEFAULT

	return 0
}

startservice() {
	case "$TYPE" in
		serial)
			ssft_select_single "$(gettext "DEVICE")" "$(gettext "Please select")" "${SERIALDEVICES[@]}"  || bailout 1
			[ -n "$SSFT_RESULT" ] && DEVICE=$(echo $SSFT_RESULT | cut -d" " -f1)
			;;
		winmodem)
			[ -n "$DISPLAY" ] && x-terminal-emulator -e bash -c "scanmodem; read -p 'Enter to quit.'" || { scanmodem; read -p 'Enter to quit.'; }
			return 1
			;;
		usb)
			ssft_select_single "$(gettext "DEVICE")" "$(gettext "Please select")" "${USBDEVICES[@]}"  || bailout 1
			[ -n "$SSFT_RESULT" ] && DEVICE=$(echo $SSFT_RESULT | cut -d" " -f1)
			;;
		irda)
			killall irattach 2>/dev/null
			modprobe irda 2>/dev/null
			modprobe ircomm-tty 2>/dev/null

			ssft_select_single "$(gettext "DEVICE")" "$(gettext "Please select")" "${AUTODEVICE[@]}" "${SERIALDEVICES[@]}" "${USBDEVICES[@]}"  || bailout 1
			[ -n "$SSFT_RESULT" ] && RAWDEVICE=$(echo $SSFT_RESULT | cut -d" " -f1)

			SSFT_DEFAULT="${DONGLES[0]}"
			ssft_select_single "$(gettext "IRDA Adapter type")" "$(gettext "Please select type of IRDA adapter:")" "${DONGLES[@]}"  || bailout 1
			[ -n "$SSFT_RESULT" ] && DONGLE=$(echo $SSFT_RESULT | cut -d" " -f1)
			unset SSFT_DEFAULT

			case "$DONGLE" in auto) DONGLE="" ;; *) DONGLE="-d $DONGLE" ;; esac
			if [ "$RAWDEVICE" = "auto" ]; then
				gauge "Device-Scan..." &
				
				for i in /dev/ttyUSB* /dev/ttyS*; do
					RAWDEVICE="${i##/dev/}"
					irattach "/dev/$RAWDEVICE" $DONGLE -s
					sleep 0.125s
				done
				
				killgauge
				sleep 2
				RAWDEVICE="$(ps auxw | awk '/irattach/{print $12}' | head -1)"
				RAWDEVICE="${RAWDEVICE##/dev/}"
			else
				irattach "/dev/$RAWDEVICE" $DONGLE -s
				sleep 2
			fi

			if ifconfig irda0 >/dev/null 2>&1; then
				true
			else

				ssft_display_message "$(gettext "ERROR")" "$(gettext "Failed to start device daemon. Probably the selected port is wrong.")"
				DEVICE=""
				return 1
			fi
			
			DEVICE="ircomm0"
			rm -f /etc/irda.conf

			echo "#irda.conf Version: 1.0"				 >/etc/irda.conf
			echo "IRDADEV=/dev/$RAWDEVICE"				>>/etc/irda.conf
			[ -n "$DONGLE" ] && echo "DONGLE=\"${DONGLE##-d }\""	>>/etc/irda.conf
			echo "DISCOVERY=-s"					>>/etc/irda.conf
			echo "ENABLE=yes"					>>/etc/irda.conf

			if [ -x "/etc/init.d/irda-utils" ]; then
				/usr/sbin/update-rc.d -f irda-utils remove >/dev/null 2>&1
				update-rc.d irda-utils defaults >/dev/null
				[ -x "/usr/sbin/invoke-rc-d" ] && /usr/sbin/invoke-rc.d irda-utils restart || /etc/init.d/irda-utils restart
			fi
			;;
		bluetooth)
			killall hcid 2>/dev/null
			killall rfcomm 2>/dev/null
			hcid || return 1

			count=0
			gauge "Device-Scan..." &
			
			while read HW NAME; do

				[ -n "$HW" ] && BLUES[$count]="${HW}--${NAME}"

				count=$(($count + 1))
			done <<EOT
$(hcitool scan 2>/dev/null | awk '/[0-9]:[0-9]/{print $0}')
EOT
			killgauge
			
			if [ -n "${BLUES[0]}" ]; then

				ssft_select_single "$(gettext "Bluetooth Devices")" "$(gettext "These bluetooth devices exist nearby. Please select:")" "${BLUES[@]}"  || bailout 1
				[ -n "$SSFT_RESULT" ] && RAWDEVICE=$(echo $SSFT_RESULT | cut -d\- -f1)
			else
				SSFT_DEFAULT="00:00:00:00:00:00"
				ssft_read_string \
					"$(gettext "No bluetooth devices in range")" \
					"$(gettext "No bluetooth devices responded to our scan. Please enter the address of a remote bluetooth device.")" \
					|| bailout 1
				unset SSFT_DEFAULT
				[ -n "$SSFT_RESULT" ] && RAWDEVICE="$SSFT_RESULT"
			fi

			
			if [ -r /etc/bluetooth/pin ]; then
				read PIN < /etc/bluetooth/pin  2>/dev/null
				rm -f "$TMP"
			fi


			SSFT_DEFAULT="$PIN"
			ssft_read_string \
				"$(gettext "PIN")" \
				"$(gettext "Please chose a 4-digit PIN number for authention of bluetooth devices:")" \
				|| bailout 1
			unset SSFT_DEFAULT
			[ -n "$SSFT_RESULT" ] && PIN="$SSFT_RESULT"

			rm -f /etc/bluetooth/pin
			echo "$PIN" >/etc/bluetooth/pin

			rm -f /etc/bluetooth/rfcomm.conf
			cat >/etc/bluetooth/rfcomm.conf <<EOT
#
# RFCOMM configuration file.
#
# Created by configure-modemlink on $(date)
#

rfcomm0 {
 bind yes;
# Bluetooth address of the device
 device $RAWDEVICE;
# RFCOMM channel for the connection
#	channel	1;
# Description of the connection
 comment "Selected Bluetooth device";
}
EOT

			rfcomm bind all
			if [ -x /etc/init.d/bluetooth ]; then
				/usr/sbin/update-rc.d -f bluez-utils remove >/dev/null 2>&1
				/usr/sbin/update-rc.d bluetooth start 25 2 3 4 5 . stop 74 0 1 6 . >/dev/null
				[ -x /usr/sbin/invoke-rc.d ] && /usr/sbin/invoke-rc.d bluetooth restart || /etc/init.d/bluetooth restart
			fi
			DEVICE=rfcomm0
			;;
	esac
	return 0
}

# MAIN

while true; do
	conntype
	startservice
	
	if [ "$?" = "0" -a -n "$DEVICE" ]; then

		ssft_yesno "$(gettext "Create /dev/modem link...")" "$(eval_gettext "Do you want to set the symlink /dev/modem to point to the newly configured device? This is necessary if you want o use the device as modem for kppp, as an example, or for using GPRS (all of these located in the sidux \"network configuration\" menu).

Create link /dev/modem ->  \$DEVICE ?")" || bailout 1

		rm -f /dev/modem
		ln -sf /dev/"$DEVICE" /dev/modem
		break
	else
		ssft_yesno "$(gettext "ERROR")" "$(gettext "This seems to have failed. Do you want to try again?")"  || bailout 1
	fi
done

bailout 0

